version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.1

jobs:
  deploy:
    machine: true
    steps:
      # 1. Configure AWS CLI
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          default-region: AWS_REGION

      # 2. Fetch the current public IP for our instance
      - run:
          name: Get EC2 public IP
          command: |
            IP=$(aws ec2 describe-instances \
              --instance-ids $EC2_INSTANCE_ID \
              --query 'Reservations[0].Instances[0].PublicIpAddress' \
              --output text)
            echo "export EC2_HOST=$IP" >> $BASH_ENV

      # 3. Load our SSH key into the agent
      - add_ssh_keys:
          fingerprints:
            - "SHA256:u6+po0YEbQhrHo1j40ptyNmFrngk8M0GFGncnU5vyCE"

      # 4. Generate the .env file from secure CircleCI vars
      - run:
          name: Generate .env file
          command: |
            echo "DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}"                > .env
            echo "DJANGO_DEBUG=${DJANGO_DEBUG:-False}"                   >> .env
            echo "DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}"          >> .env
            echo "DATABASE_URL=${DATABASE_URL}"                          >> .env
            echo "DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}">> .env
            echo "DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}"      >> .env
            echo "DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}">> .env
            echo "NUM_WORKERS=${NUM_WORKERS:-1}"                         >> .env

      # 5. Upload .env to the EC2
      - run:
          name: Upload .env to EC2
          command: |
            scp -o StrictHostKeyChecking=no .env \
              $EC2_USER@$EC2_HOST:~/app/.env

      # 6. SSH & deployâ€”single quoted command, no heredoc
      - run:
          name: Bootstrap & Deploy on EC2
          command: |
            ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST "\
              sudo yum update -y && \
              sudo amazon-linux-extras install docker -y && \
              sudo yum install -y docker-compose-plugin && \
              sudo service docker start && \
              cd ~/app && \
              git fetch origin && \
              git reset --hard origin/main && \
              sudo docker compose up -d --build --remove-orphans\
            "

workflows:
  deploy_on_push:
    jobs:
      - deploy:
          filters:
            branches:
              only: main
