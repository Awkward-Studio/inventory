version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.1

jobs:
  deploy:
    machine: true
    steps:
      # 1. AWS CLI (uses AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_DEFAULT_REGION)
      - aws-cli/setup

        # 2. Fetch the current public IP for our instance
      - run:
          name: Get EC2 public IP
          command: |
            # ensure AWS CLI is pointed at the right region
            aws configure set region $AWS_DEFAULT_REGION

            # explicitly pass --region when describing instances
            IP=$(aws ec2 describe-instances \
              --region $AWS_DEFAULT_REGION \
              --instance-ids $EC2_INSTANCE_ID \
              --query 'Reservations[0].Instances[0].PublicIpAddress' \
              --output text)

            echo "export EC2_HOST=$IP" >> $BASH_ENV

      # 3. Load the deploy key
      - add_ssh_keys:
          fingerprints:
            - "SHA256:u6+po0YEbQhrHo1j40ptyNmFrngk8M0GFGncnU5vyCE"

      # 4. Generate .env in CI from secure vars
      - run:
          name: Generate .env file
          command: |
            echo "DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}"                > .env
            echo "DJANGO_DEBUG=${DJANGO_DEBUG:-False}"                   >> .env
            echo "DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}"          >> .env
            echo "DATABASE_URL=${DATABASE_URL}"                          >> .env
            echo "DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}">> .env
            echo "DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}"      >> .env
            echo "DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}">> .env
            echo "NUM_WORKERS=${NUM_WORKERS:-1}"                         >> .env

      # 5. Ensure home directory structure (optional)
      - run:
          name: Ensure ~/app exists on EC2
          command: |
            ssh -o StrictHostKeyChecking=no \
                $EC2_USER@$EC2_HOST \
              "mkdir -p ~/app"

      - run:
          name: Upload app to EC2
          command: |
            # ensure the remote dir exists
            ssh -o StrictHostKeyChecking=no "$EC2_USER@$EC2_HOST" "mkdir -p ~/app"

            # enable copying dot‐files too
            shopt -s dotglob

            # copy everything in the repo (code + .env + compose + Dockerfile + inventory_api/, etc.)
            scp -r -o StrictHostKeyChecking=no * "$EC2_USER@$EC2_HOST:~/app"

      # 7. Upload the .env to the right place
      - run:
          name: Upload .env to EC2
          command: |
            scp -o StrictHostKeyChecking=no .env \
              $EC2_USER@$EC2_HOST:~/app/.env

      # 8. Bootstrap Docker & Compose, then deploy
      - run:
          name: Bootstrap & Deploy on EC2
          command: |
            ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST "\
              set -e; \
              # Install Docker if needed
              if ! command -v docker >/dev/null; then \
                sudo yum update -y; \
                sudo amazon-linux-extras install docker -y; \
                sudo systemctl enable docker; \
              fi; \
              sudo systemctl start docker; \
              # Install docker-compose v2 binary if missing
              if ! command -v docker-compose >/dev/null; then \
                sudo curl -SL https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-linux-x86_64 \
                  -o /usr/local/bin/docker-compose; \
                sudo chmod +x /usr/local/bin/docker-compose; \
              fi; \
              # Deploy
              cd ~/app; \
              docker-compose up -d --build --remove-orphans\
            "

workflows:
  deploy_on_push:
    jobs:
      - deploy:
          filters:
            branches:
              only: main
